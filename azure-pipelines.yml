
variables:
    buildConfiguration: "release"
    testProject: "tests/MySample.Tests"
    solution: "MySample.sln"

strategy:
  matrix:
    linux:
      imageName: 'jaba-vm'
    windows:
      imageName: 'jaba-windows'

trigger:
- master

pool:
  name: 'TestPool'
  demands: Agent.Name -equals $(imageName)

steps:
- task: UseDotNet@2
  displayName: Install .NET 6 sdk 
  inputs:
    packageType: sdk
    version: 6.0.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: SonarCloudPrepare@3
  displayName: 'Sonar Cloud prepare'
  inputs:
    SonarQube: 'SonarCloud'
    organization: 'sonarcloud-jaba'
    scannerMode: 'dotnet'
    projectKey: 'jabadrian_code-coverage-sample'
    projectName: 'code-coverage-sample'
    extraProperties: 'sonar.flex.cobertura.reportPaths=$(Agent.TempDirectory)\**\coverage.opencover.xml'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Test in windows'
  inputs:
    command: test
    projects: '**/*Tests*.csproj'
    publishTestResults: true
    arguments: '--configuration $(buildConfiguration) --no-build --collect "Code Coverage" --settings ./coverlet.runsettings'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: |
    dotnet test --logger trx --no-build --collect "Code Coverage" --settings ./coverlet.runsettings
  displayName: 'Test in Linux'
  condition: eq( variables['Agent.OS'], 'Linux' )

- task: SonarCloudAnalyze@3
  displayName: 'Run Code Analysis'

- task: SonarCloudPublish@3
  displayName: 'Publish Quality Gate Result'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    projects: $(solution)
    publishWebProjects: false
    modifyOutputPath: true
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact (WebApp.zip)'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
